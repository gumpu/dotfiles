" vi: fdm=marker foldenable
"
" Frans Slothouber
"

" From <https://github.com/dag/vim-fish>
" ""Vim needs a more POSIX compatible shell than fish for certain
" functionality to work, such as :%!, compressed help pages and many
" third-party addons. If you use fish as your login shell or launch Vim from
" fish, you need to set shell to something else in your ~/.vimrc, for
" example:""
if &shell =~# 'fish$'
    set shell=bash
endif

" This should always be first.
" pathogen is very handy. Allows you to add and more important
" remove plugins with ease.
execute pathogen#infect()

"==== Bare Minimum =======================================================
" {{{
" Enable Vim features.
set nocompatible
Helptags
filetype plugin on
filetype indent on
" }}}

"=========================================================================
" Moving
" {{{
" Remove cursor keys, they slow you down.
map <Left>  <Nop>
map <Right> <Nop>
map <Up>    <Nop>
map <Down>  <Nop>

" map <S-PageUp>   <NOP>
" map <S-PageDown> <NOP>
" Make page-up followed by page-down return to the
" exact same spot.
map  <PageUp>   <C-U>
map  <PageDown> <C-D>
imap <PageUp>   <C-O><C-U>
imap <PageDown> <C-O><C-D>
set nostartofline
" }}}

"=========================================================================
"==== Look and Feel ===============================================
" {{{
"
" Force to use underline for spell check results
" The defaults do not work with all terminals, especially Tmux.
augroup SpellUnderline
  autocmd!
  autocmd ColorScheme *
    \ highlight SpellBad
    \   cterm=Underline
    \   ctermfg=NONE
    \   ctermbg=NONE
    \   term=Reverse
    \   gui=Undercurl
    \   guisp=Red
  autocmd ColorScheme *
    \ highlight SpellCap
    \   cterm=Underline
    \   ctermfg=NONE
    \   ctermbg=NONE
    \   term=Reverse
    \   gui=Undercurl
    \   guisp=Red
  autocmd ColorScheme *
    \ highlight SpellLocal
    \   cterm=Underline
    \   ctermfg=NONE
    \   ctermbg=NONE
    \   term=Reverse
    \   gui=Undercurl
    \   guisp=Red
  autocmd ColorScheme *
    \ highlight SpellRare
    \   cterm=Underline
    \   ctermfg=NONE
    \   ctermbg=NONE
    \   term=Reverse
    \   gui=Undercurl
    \   guisp=Red
  augroup END

set encoding=utf-8
set showbreak=↪
set number
" No utterly annoying beep!!!! What moron did think beeping for every
" mistake was a good idea!
set vb t_vb=""
" Switch on syntax highlighting.
syntax enable
" Use 256 colours
set t_Co=256
" Ideally this would change automatically based on the amount of ambient light
set background=dark
" set background=light
colorscheme solarized
" For some reason other colors than these show up as gray...
hi Search cterm=NONE ctermfg=red ctermbg=black
"
" Folding
set foldmethod=indent
" Show spaces and tabs, very handy
"set listchars=tab:>.,trail:.
set listchars=tab:↠.,trail:⌀
set list
" Briefly show a matching brace.
set showmatch
" Use the  'vi:noai:sw=3' lines found at the end or begin of a file.
set modeline
" Auto-wrap after 78 characters.
set textwidth=78
" Number of spaces that a <Tab> in the file counts for.
set ts=4
set sw=4
" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start
" We want to see at least ten lines above and below the cursor.
set so=10
" More space for the help window
set helpheight=40
" Do not highlight matching paren.
" (Too distracting, and makes it hard to see " where the cursor is).
let loaded_matchparen=1
" }}}

"==== Search ======================================================
" {{{
" Switch on search pattern highlighting
set hlsearch
" Use :find somefile.h   to find somefile.h any where in the tree
set path=**
" }}}

"==== Fancy Look and Feel =========================================
" {{{
" This only works if you did a:
"   export FAST=1
" on your shell before stating vim.
" Reason is that this is bandwidth intensive.
if $FAST
    " Highlight the line the cursor is on.
    " Not advisable for slow connections.
    set cursorline

    " Make the line numbers relative to the current line
    " This makes is real easy to jump to the right line
    " with   k and j   (i.e.  5j 12j 3k etc)
    " Also not advisable for slow connections.
    set number
    set relativenumber
endif
" }}}

"=======================================================
" Completion options
" {{{
" .=Current buffer,
" w=other windows,
" b=other loader buffers in the buffers " list,
" u=unloaded buffers in the buffers list
" t=tag completion,
" i=included files,
" kspell=current active spell checking
" Switching on too many of these really slows the search

set complete=.,w,t,kspell

" Search for tags in tags file and look for it up
" in the directory tree too.
set tags=tags;
" }}}

"======== SPELLING ========================================
" {{{
" This is a bad idea, some files are really not suited for spell checking.
"
"   set spell.
"
" Better to add this to .lvimrc in the directory of the files
" you want to have spell-checked.
set nospell

" And I usually write in English
set spelllang=en
" }}}

"======== VIMINFO =========================================
" {{{

" read/write a .viminfo file,
" '20 remember mark for up to 20 files
" \" don't store more than 500 lines of registers
set viminfo='20,\"500

" The % makes it remember the buffers from a previous setting,
" but this is dangerous when you have multiple copies of a file in
" different directories as you might end up editing the wrong file.
" set viminfo='20,\"500,%

" Keep 500 lines of command line history
set history=500

" Never switch this off as per manual.
set magic

" Expand tabs to spaces, tabs are EVIL!
set expandtab

" }}}

"======== Formatting ======================================
" {{{
" t -- Auto-wrap text.
" c -- Auto-wrap comments.
" r -- Automatically insert the current comment leader.
" q -- Allow formatting of comments with "gq".
" l -- Long lines are not broken in insert mode: When a line was longer than
"      'textwidth' when the insert command started, Vim does not
"      automatically format it.
set formatoptions=qrtcl
" }}}

"======== Compiling Code ==================================
" {{{
nnoremap <F2> :copen<CR>
nnoremap <F5> :read !/home/frans/bin/static_prototype.py %:p<CR>
" }}}

"======================== STATUS LINE =====================
" {{{
" Make command line one line high.
set ch=1
" Handled by airline
set noruler
" Always show a status line.
set laststatus=2
let g:airline#extensions#branch#enabled=1
" }}}

"===================== VIM R Plugin =======================================
" {{{
" Do _not_ replace _ with <-
let vimrplugin_assign = 0
" Send visually selected lines to R
let vimrplugin_map_r = 1
" We love folding, also in R.
let r_syntax_folding = 0
" Set to 1 to do a vertical split. So we have vim on one side
" and the R console on the other side.
let vimrplugin_vsplit = 0
" }}}

"===================== remove spaces at the end of a line =================
autocmd BufWritePre * %s/\s\+$//e

"==========================================================================
" Airline
" {{{
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" unicode symbols for the status bar.
" let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
" let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
" let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
" let g:airline_symbols.paste = 'Þ'
" let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline_theme='sol'
" }}}

"==========================================================================
" JEDI
"==========================================================================
" TODO Figure out why this does not work
" let g:jedi#completions_enabled 0

"==========================================================================
" NERDTree is useful but the build-in netrw works better
"
" NERDTree
" {{{
" Short-cut to toggle NERDTree window
" map <C-n> :NERDTreeToggle<CR>
" Replace  :e .
" let NERDTreeHijackNetrw=1
" }}}

"==========================================================================
" For the super handy vim-localvimrc plugin
" {{{
" <https://github.com/embear/vim-localvimrc>
let g:localvimrc_sandbox=0
let g:localvimrc_whitelist='/home/frans/Documents/.*'
" }}}

"==========================================================================
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 0
" let g:syntastic_check_on_wq = 0
"
" let g:syntastic_mode_map = {
"     \ "mode": "active",
"     \ "active_filetypes": [ "markdown" ],
"     \ "passive_filetypes": ["c", "python", "markdown"] }

"==========================================================================
" Replaced by Slime
" Nvim-R
" {{{
" Do not turn _ into a <-
" let R_assign = 0
" let R_term="urxvt"
" let R_term="st"
" }}}

"==========================================================================
" SnipMate
" {{{
let g:snipMate = {}
let g:snipMate.snippet_version = 1
" }}}
"==========================================================================
" Slime is the best thing since sliced bread
" {{{
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "{last}"}
" }}}

" vi: spell spl=en
